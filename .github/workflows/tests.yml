name: tests

on: [push, pull_request]

jobs:

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build documentation
        env:
          READTHEDOCS: 'True'
        run: |
          pip install . -r requirements/doc.txt
          make -C docs html SPHINXOPTS=-W

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install packages
        run: pip install black mypy ruff
      - name: Run linters
        run: |
          ruff examples src tests
          black --check --diff examples src tests

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python:
          - '3.11'
          - '3.10'
          - '3.9'
          - '3.8'
          - '3.7'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install OS packages and disable firewall
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install opus libvpx
          sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
      - name: Install OS packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libopus-dev libvpx-dev
      - name: Run tests
        run: |
          python -m pip install -U pip setuptools wheel
          pip install .[dev]
          coverage run -m unittest discover -v
          coverage xml
        shell: bash
      - name: Upload coverage report
        uses: codecov/codecov-action@v3

  package-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build source package
        run: python setup.py sdist
      - name: Upload source package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  package-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
          - os: ubuntu-latest
            arch: i686
          - os: ubuntu-latest
            arch: x86_64
          - os: windows-latest
            arch: AMD64
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
      - name: Build wheels
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_BUILD: python scripts/fetch-vendor.py /tmp/vendor
          CIBW_BEFORE_BUILD_WINDOWS: python scripts\fetch-vendor.py C:\cibw\vendor
          CIBW_ENVIRONMENT: CFLAGS=-I/tmp/vendor/include LDFLAGS=-L/tmp/vendor/lib
          CIBW_ENVIRONMENT_WINDOWS: INCLUDE=C:\\cibw\\vendor\\include LIB=C:\\cibw\\vendor\\lib
          CIBW_SKIP: cp36-* pp36-* *-musllinux*
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir dist
        shell: bash
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test, package-source, package-wheel]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
